
            #!/bin/sh
option="${1}"
if [ "${2}" != '' ]; then
    VERSION="v${2}"
else
    VERSION="latest"
fi

PROJECT_DIR=`pwd`
BIN_DIR="/bin/"  # the dir on which the apk will be stored
APK_FILENAME="PlaceAVoteApp_${VERSION}.apk" #form the apk filename
IPA_FILENAME="PlaceAVoteApp_${VERSION}.ipa" #form the apk filename
APPLE_TEAM_ID="35WUYAWLQM"
ANDROID=1
IOS=2




ReleaseAndroid () {
    cd ${PROJECT_DIR}/android
    { # my 'try' block
        ./gradlew assembleRelease &&
        cd ${PROJECT_DIR} &&
        mkdir -p bin  && #making a bin directory if not exists
        printf "\nApk built. It can be found in <Project>${BIN_DIR}${APK_FILENAME} \n" &&
        cp ./android/app/build/outputs/apk/app-release.apk ${PROJECT_DIR}${BIN_DIR}${APK_FILENAME} && #copy the apk to the output dir
        return 0
    } || { # your 'catch' block
        printf "\nError: Android build Failed." &&
        return -1
    }
}


ReleaseIos(){
    cd ${PROJECT_DIR}
    { # my 'try' block
        mkdir -p tmp && #making a tmp directory on which we will save the tmp archive if not exists
        mkdir -p bin && #making a bin directory if not exists
        cd ${PROJECT_DIR}/ios &&
        echo "<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>teamID</key><string>${APPLE_TEAM_ID}</string><key>method</key><string>ad-hoc</string><key>uploadSymbols</key><true/></dict></plist>" >${PROJECT_DIR}/tmp/tmpPlist.plist  &&
        ./xcbuild-safe.sh -scheme "PlaceAVote" archive -archivePath ${PROJECT_DIR}/tmp/pav.xcarchive &&
        ./xcbuild-safe.sh -exportArchive -archivePath ${PROJECT_DIR}/tmp/pav.xcarchive -exportOptionsPlist ${PROJECT_DIR}/tmp/tmpPlist.plist -exportPath ${PROJECT_DIR}${BIN_DIR} &&
        mv ${PROJECT_DIR}${BIN_DIR}"Pav Release.ipa" ${PROJECT_DIR}${BIN_DIR}${IPA_FILENAME} &&
        cd ${PROJECT_DIR} &&
        rm -rf tmp &&
        return 0
    } || { # your 'catch' block
        printf "\nError: Ios build Failed." &&
        return -1
    }
}


UploadToBucket(){
    if [ ${1} -eq ${ANDROID} ]; then
        { # my 'try' block
            apkLoc=${PROJECT_DIR}${BIN_DIR}${APK_FILENAME} && #Where the apk can be found
            printf "\nNow uploading ${APK_FILENAME} to PAV S3 bucket.\n" &&
            aws s3 cp ${apkLoc} s3://variousprojects/Pav-Mobile-Release/Android/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers  &&
            return 0
        } || { # your 'catch' block
            printf "\nError: We had trouble uploading the ipa to our pav bucket." &&
            return -1
        }
    elif [ ${1} -eq ${IOS} ]; then
        { # my 'try' block
            ipaLoc=${PROJECT_DIR}${BIN_DIR}${IPA_FILENAME} && #Where the apk can be found
            printf "\nNow uploading ${IPA_FILENAME} to PAV S3 bucket.\n" &&
            aws s3 cp ${ipaLoc} s3://variousprojects/Pav-Mobile-Release/iOS/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers &&
            return 0
        } || { # your 'catch' block
            printf "\nError: We had trouble uploading the apk to our pav bucket." &&
            return -1
        }
    else
        printf "\nError: Could not upload to our pav bucket."
        return -1
    fi
    return 0
}








case ${option} in
    -b)

    printf "\nInitiating build and upload for both iOS and Android..."
    success_droid=-1
    success_ios=-1

    printf "\nNow building and releasing for android"
    { # my 'try' block
        ReleaseAndroid && UploadToBucket ${ANDROID} && success_droid=0
    } || { # your 'catch' block
        printf "\nBuild on Android Failed. Moving on to iOS.\n"
    }


    printf "\nNow building and releasing for iOS"
    { # my 'try' block
        ReleaseIos && UploadToBucket ${IOS} && success_ios=0
    } || { # your 'catch' block
        printf "\nBuild on iOS Failed. Process terminating.\n"
    }

    if [ $success_droid -eq 0 -a $success_ios -eq 0 ] ; then
        printf "\nSuccess in building both iOS and Android executables."
        printf "\n \t -The (iOS) ipa (ad-hoc) be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/iOS/${IPA_FILENAME}"
        printf "\n \t -The (Android) apk can be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/Android/${APK_FILENAME} \n"
        printf "A new mobile app version has been built and released: \n- A new iOS version (ad-hoc) ipa can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/iOS/${IPA_FILENAME}   (This will work only with those with registered development devices) \n- A new Android version of placeavote can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/Android/${APK_FILENAME}\n" | slackcat -s -t -p -c mobile-dev
        exit 0
    fi

    ;;
    -a)
        printf "\nNow building for Android."
        ReleaseAndroid
        exit 0
    ;;
    -[ua][ua])
    printf "\nNow uploading the existing android version"
        { # my 'try' block
            UploadToBucket ${ANDROID} && printf "\nSuccess: The apk can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/Android/${APK_FILENAME}  \n" && exit 0
        } || { # your 'catch' block
            printf "\nUpload Failed. Process terminating.\n"
        }
    ;;

    -[ra][ra])
        printf "\nNow building and releasing for android"
        { # my 'try' block
            ReleaseAndroid && UploadToBucket ${ANDROID} && printf "\nSuccess: The apk can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/Android/${APK_FILENAME}  \n" &&
            printf "New mobile app build: \nA new Android version of placeavote can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/Android/${APK_FILENAME}\n" | slackcat -s -t -p -c mobile-dev &&
            exit 0
        } || { # your 'catch' block
            printf "\nBuild Failed, we got no apk to upload. Process terminating.\n"
        }
    ;;
    -i)
        printf "\nNow building for iOS"
        ReleaseIos
    ;;
    -[ui][ui])
        printf "\nNow uploading the existing iOS version."
        { # my 'try' block
            UploadToBucket ${IOS} && printf "\nSuccess: The (ad-hoc) ipa can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/iOS/${IPA_FILENAME} \n" && exit 0
        } || { # your 'catch' block
            printf "\nUpload Failed. Process terminating.\n"
        }
    ;;
    -[ri][ri])
        printf "\nNow building and releasing for iOS"
        { # my 'try' block
            ReleaseIos && UploadToBucket ${IOS} && printf "\nSuccess: The (ad-hoc) ipa can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/iOS/${IPA_FILENAME} \n" &&
            printf "New mobile app build: \nA new iOS version (ad-hoc) ipa can now be found on https://s3-us-west-2.amazonaws.com/variousprojects/Pav-Mobile-Release/iOS/${IPA_FILENAME} (This will work only with those with registered development devices) \n" | slackcat -s -t -p -c mobile-dev &&
            exit 0
        } || { # your 'catch' block
            printf "\nBuild Failed, we got no ipa to upload. Process terminating.\n"
        }
    ;;
    *)
        printf "\n`basename ${0}`:\n  usage: pavBuild -<flags> <versionString> \n     FLAGS: \n         Android: [-a] to build for Android \n         iOS: [-i] to build for iOS.\n         Both: [-b] to build for both iOS and Android. \n\n         Release flag: [-r] Add the `r` flag either on -a (android) or on -i (iOS) to also upload the version after a successful build. \n\n         Upload only flag: [-u] Add the `u` flag either on -a (android) or on -i (iOS) to ONLY upload the existing version if it exists. \n\n     If you also want to upload to the PlaceAVote variousprojects S3 bucket add [r] to the flags. \n\n     VERSION: \n         (Optional) Default: latest. That would be a string of the new version (i.e: 0.8.1). \n     EXAMPLE: \n         pavBuild -ir 0.8.1 \n\n         The command above would build an iOS version in the bin/PlaceAVoteApp_v0.8.1 dir and then upload it to Amazon S3.\n"  
        exit 1 # Command to come out of the program with status 1
    ;;
esac
